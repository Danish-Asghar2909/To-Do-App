{"version":3,"sources":["ListItem.js","App.js","serviceWorker.js","index.js"],"names":["ListItem","props","ListItems","items","map","item","className","key","type","id","value","text","onChange","e","setUpdate","target","icon","onClick","deleteItem","duration","easing","library","add","faTrash","App","state","currentItem","handleInput","bind","additem","this","setState","Date","now","preventDefault","newItem","FilterItem","filter","console","log","onSubmit","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mVAyCeA,MAnCf,SAAmBC,GAElB,IACMC,EADQD,EAAME,MACIC,KAAI,SAAAC,GAE1B,OAAO,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KACrC,2BACC,2BAAOC,KAAK,OACXC,GAAIJ,EAAKE,IACTG,MAAOL,EAAKM,KACZC,SAAU,SAACC,GAAKZ,EAAMa,UAAUD,EAAEE,OAAOL,MAAOL,EAAKE,QAE7C,8BACP,kBAAC,IAAD,CAAiBD,UAAU,UAAUU,KAAK,QAC1CC,QAAU,WAAKhB,EAAMiB,WAAWb,EAAKE,cAU5C,OACC,6BAEM,kBAAC,IAAD,CAAUY,SAAU,IAAKC,OAAO,eAC/BlB,K,eCzBTmB,IAAQC,IAAIC,K,IAiGGC,E,kDA5FX,WAAYvB,GAAO,IAAD,8BACjB,cAAMA,IAEAwB,MAAQ,CACZtB,MAAM,GACNuB,YAAc,CACbf,KAAK,GACLJ,IAAI,KAIN,EAAKoB,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACb,EAAKV,WAAa,EAAKA,WAAWU,KAAhB,gBAClB,EAAKd,UAAY,EAAKA,UAAUc,KAAf,gBAdH,E,wDAoBNf,GACXiB,KAAKC,SAAS,CACbL,YAAY,CACXf,KAAKE,EAAEE,OAAOL,MACdH,IAAIyB,KAAKC,W,8BAKLpB,GACPA,EAAEqB,iBACF,IAAMC,EAAUL,KAAKL,MAAMC,YAC3B,GAAmB,KAAhBS,EAAQxB,KAAW,CACpB,IAAMR,EAAK,sBAAO2B,KAAKL,MAAMtB,OAAlB,CAAyBgC,IACtCL,KAAKC,SAAS,CACZ5B,MAAOA,EACPuB,YAAY,CACVf,KAAK,GACLJ,IAAI,S,iCAMDA,GACT,IAAM6B,EAAaN,KAAKL,MAAMtB,MAAMkC,QAAQ,SAAAhC,GAAI,OAC9CA,EAAKE,MAAMA,KACbuB,KAAKC,SAAS,CACZ5B,MAAMiC,M,gCAIEzB,EAAKJ,GACb+B,QAAQC,IAAI,SAAST,KAAKL,MAAMtB,OAChC,IAAMA,EAAQ2B,KAAKL,MAAMtB,MAEzBA,EAAMC,KAAI,SAAAC,GACLA,EAAKE,MAAMA,IACZ+B,QAAQC,IAAIlC,EAAKE,IAAK,OAAOA,GAC7BF,EAAKM,KAAMA,MAGfmB,KAAKC,SAAS,CACZ5B,MAAOA,M,+BASX,OAGF,yBAAKG,UAAU,OAGT,0BAAMG,GAAG,aAAa+B,SAAUV,KAAKD,SACpC,2BAAOrB,KAAK,OAAOiC,YAAY,aAAa/B,MAAOoB,KAAKL,MAAMC,YAAYf,KAAMC,SAAUkB,KAAKH,cAC/F,4BAAQnB,KAAK,UAAb,UAEC,2BAAIsB,KAAKL,MAAMtB,MAAMQ,MACvB,kBAAC,EAAD,CAAUG,UAAWgB,KAAKhB,UAAWI,WAAYY,KAAKZ,WAAYf,MAAO2B,KAAKL,MAAMtB,a,GArFxEuC,IAAMC,WCAJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.bcb8a34d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ListItem.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport FlipMove from 'react-flip-move';\r\n\r\n\r\nfunction ListItem (props){\r\n\r\n\tconst items = props.items;\r\n\tconst ListItems = items.map(item=>\r\n\t{\r\n\t\t return <div className=\"list\" key={item.key}>\r\n     <p>\r\n     \t<input type=\"text\"\r\n     \t id={item.key}\r\n     \t value={item.text}\r\n     \t onChange={(e)=>{props.setUpdate(e.target.value, item.key)}}\r\n     \t />\r\n               <span>\r\n        <FontAwesomeIcon className=\"faicons\" icon=\"trash\" \r\n        onClick ={()=>{props.deleteItem(item.key)}}\r\n        />\r\n        </span>\r\n     </p>\r\n      \r\n    </div>\r\n\t\t\t\r\n\r\n\t\t\t\r\n\t})\r\n\treturn(\r\n\t\t<div>\r\n\t\t\r\n        <FlipMove duration={300} easing=\"ease-in-out\">\r\n        {ListItems}\r\n        </FlipMove>\r\n\r\n\t\t</div>\r\n\t\t)\r\n}\r\n\r\nexport default ListItem;","import React from 'react';\nimport './App.css';\nimport ListItem from './ListItem';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\n\n\n\n\nlibrary.add(faTrash)\n\n\nclass App extends React.Component{\n    \n    constructor(props){\n    \tsuper(props);\n    \t\n    \t\tthis.state = {\n    \t\t\titems:[],\n    \t\t\tcurrentItem : {\n    \t\t\t\ttext:'',\n    \t\t\t\tkey:''\n    \t\t\t}\n\n    \t\t}\n    \t\tthis.handleInput = this.handleInput.bind(this);\n    \t\tthis.additem = this.additem.bind(this);\n        this.deleteItem = this.deleteItem.bind(this);\n        this.setUpdate = this.setUpdate.bind(this);\n\n    \t\t   \t\n    }\n    \n\n    handleInput(e){\n    \tthis.setState({\n    \t\tcurrentItem:{\n    \t\t\ttext:e.target.value,\n    \t\t\tkey:Date.now()\n    \t\t}\n    \t})\n    }\n\n   additem(e){\n    e.preventDefault();\n    const newItem = this.state.currentItem;\n    if(newItem.text !==\"\"){\n      const items = [...this.state.items, newItem];\n    this.setState({\n      items: items,\n      currentItem:{\n        text:'',\n        key:''\n      }\n    })\n    }\n  }\n\ndeleteItem(key){\n  const FilterItem = this.state.items.filter( item =>\n    item.key!==key);\n  this.setState({\n    items:FilterItem\n  })\n    \n}\n  setUpdate(text,key){\n    console.log(\"items:\"+this.state.items);\n    const items = this.state.items;\n    // eslint-disable-next-line\n    items.map(item=>{      \n      if(item.key===key){\n        console.log(item.key +\"    \"+key)\n        item.text= text;\n      }\n    })\n    this.setState({\n      items: items\n    })\n  \n\n}\n\n\n\n\trender(){\n\t\treturn(\n\n\n<div className=\"App\">\n       \n      \n      <form id=\"to-do-form\" onSubmit={this.additem}> \n       <input type=\"text\" placeholder=\"enter text\" value={this.state.currentItem.text} onChange={this.handleInput} />\n       <button type=\"submit\"> ADD </button>\n      </form>\n        <p>{this.state.items.text}</p>\n      <ListItem setUpdate={this.setUpdate} deleteItem={this.deleteItem} items={this.state.items}></ListItem>\n     \n    </div>\n\t\t\t);\n\t}\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}